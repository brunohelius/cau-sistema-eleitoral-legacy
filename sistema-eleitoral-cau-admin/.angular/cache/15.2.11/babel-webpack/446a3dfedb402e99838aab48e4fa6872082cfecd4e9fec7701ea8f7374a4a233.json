{"ast":null,"code":"import { BehaviorSubject, throwError } from 'rxjs';\nimport { map, catchError } from 'rxjs/operators';\nimport { environment } from '../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nexport let AuthService = /*#__PURE__*/(() => {\n  class AuthService {\n    constructor(http, router) {\n      this.http = http;\n      this.router = router;\n      this.apiUrl = `${environment.apiUrl}/auth`;\n      const storedUser = localStorage.getItem('currentUser');\n      this.currentUserSubject = new BehaviorSubject(storedUser ? JSON.parse(storedUser) : null);\n      this.currentUser = this.currentUserSubject.asObservable();\n    }\n    get currentUserValue() {\n      return this.currentUserSubject.value;\n    }\n    login(credentials) {\n      return this.http.post(`${this.apiUrl}/signin`, credentials).pipe(map(response => {\n        if (response.token) {\n          const user = {\n            id: response.id,\n            username: response.username,\n            email: response.email,\n            nomeCompleto: response.username,\n            roles: response.roles || []\n          };\n          localStorage.setItem('token', response.token);\n          localStorage.setItem('currentUser', JSON.stringify(user));\n          this.currentUserSubject.next(user);\n        }\n        return response;\n      }), catchError(error => {\n        console.error('Erro no login:', error);\n        return throwError(() => error);\n      }));\n    }\n    logout() {\n      localStorage.removeItem('token');\n      localStorage.removeItem('currentUser');\n      this.currentUserSubject.next(null);\n      this.router.navigate(['/login']);\n    }\n    register(userData) {\n      return this.http.post(`${this.apiUrl}/signup`, userData).pipe(catchError(error => {\n        console.error('Erro no registro:', error);\n        return throwError(() => error);\n      }));\n    }\n    getToken() {\n      return localStorage.getItem('token');\n    }\n    isLoggedIn() {\n      const token = this.getToken();\n      if (!token) {\n        return false;\n      }\n      try {\n        // Verificar se o token não expirou\n        const payload = JSON.parse(atob(token.split('.')[1]));\n        const currentTime = Math.floor(Date.now() / 1000);\n        return payload.exp > currentTime;\n      } catch (error) {\n        return false;\n      }\n    }\n    hasRole(role) {\n      const user = this.currentUserValue;\n      return user ? user.roles.includes(role) : false;\n    }\n    hasAnyRole(roles) {\n      const user = this.currentUserValue;\n      if (!user) return false;\n      return roles.some(role => user.roles.includes(role));\n    }\n    refreshToken() {\n      // Implementar renovação de token se necessário\n      return this.http.post(`${this.apiUrl}/refresh`, {});\n    }\n    isTokenExpired() {\n      const token = this.getToken();\n      if (!token) return true;\n      try {\n        const payload = JSON.parse(atob(token.split('.')[1]));\n        const currentTime = Math.floor(Date.now() / 1000);\n        return payload.exp <= currentTime;\n      } catch (error) {\n        return true;\n      }\n    }\n    static {\n      this.ɵfac = function AuthService_Factory(t) {\n        return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n      };\n    }\n    static {\n      this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n        token: AuthService,\n        factory: AuthService.ɵfac,\n        providedIn: 'root'\n      });\n    }\n  }\n  return AuthService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}